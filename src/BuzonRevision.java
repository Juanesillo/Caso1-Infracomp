public class BuzonRevision {


    private Producto[] buzon;
    private int indice=0;

    

    public BuzonRevision(int capacidad){

        this.buzon= new Producto[capacidad];
    }


    public synchronized void agregarbuzon(Producto producto){

        //Condici√≥n 1: Como se comparten el buzon entre productor y operadores calidad 
        // se debe verificar si el buzon esta lleno o no para continuar con la ejecuci√≥n

        while (indice>=buzon.length) {
            try{
                System.out.println("El buzon esta lleno");
                wait();
            }
            catch(InterruptedException e){
                System.out.println("Error");
            }
            
        }
        // Se agrega el producto al array si el buzon no esta lleno notificando al resto de threads 


            buzon[indice] = producto;
            System.out.println("Producto agregado en posici√≥n " + indice);
            indice++;
            notifyAll();
    }




    public synchronized Producto extraerbuzon() {
        while (indice == 0) { // üõë Esperar correctamente si el buz√≥n est√° vac√≠o
            try {
                System.out.println("‚è≥ Esperando productos en el buz√≥n...");
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("üö® Error en extraerbuzon()");
            }
        }

        Producto producto = buzon[--indice]; // üîπ Reducir el √≠ndice solo cuando haya producto disponible
        System.out.println("üì§ Producto extra√≠do: " + producto);
        notifyAll(); // üîπ Despertar a los productores si hab√≠a espacio ocupado
        return producto;
    }


    public synchronized boolean estaVacio() {
        return indice == 0;
    }



}
